Model accuracy on 10000 test images: 52.47%
Category   - Accuracy
plane      - 55.8
car        - 60.6
bird       - 37.7
cat        - 36.0
deer       - 43.5
dog        - 40.4
frog       - 66.5
horse      - 57.6
ship       - 69.1
truck      - 57.5

lr 99%
egy réteg boxconv
20 epoch
1réteg fcnn
3*40 kernel


class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = BoxConv2d(3, 40, 32, 32)
        self.conv1_1x1 = nn.Conv2d(120, 120, 1, 1)

        self.fc1 = nn.Linear(8*8*120, 10)

    def forward(self, x):
        x = self.conv1_1x1(self.conv1(x))
        x = F.relu(F.max_pool2d(x, 4))

        x = self.fc1(x.view(-1, 8*8*120))
        return F.log_softmax(x, dim=1)

def train(model, device, train_loader, optimizer, epoch):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % 100 == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))

        for g in optimizer.param_groups:
            g['lr'] *= 0.999

def test(model, device, test_loader):
    model.eval()   
    total_correct = 0
    total_images = 0
    confusion_matrix = np.zeros([10,10], int)
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            outputs = model(data)
            _, predicted = torch.max(outputs.data, 1)
            total_images += target.size(0)
            total_correct += (predicted == target).sum().item()
            for i, l in enumerate(target):
                confusion_matrix[l.item(), predicted[i].item()] += 1 

    model_accuracy = total_correct / total_images * 100
    print('Model accuracy on {0} test images: {1:.2f}%'.format(total_images, model_accuracy))

    print('{0:10s} - {1}'.format('Category','Accuracy'))
    for i, r in enumerate(confusion_matrix):
        print('{0:10s} - {1:.1f}'.format(classes[i], r[i]/np.sum(r)*100))

                   

def main():
    # Training settings
    use_cuda = torch.cuda.is_available()
    batch_size = 64
    n_epochs = 20

    torch.manual_seed(666)

    device = torch.device('cuda' if use_cuda else 'cpu')

    mnist_train = datasets.CIFAR10(
        './', train=True, download=True, transform=transforms.ToTensor())
    mnist_test = datasets.CIFAR10(
        './', train=False, transform=transforms.ToTensor())

    kwargs = {'num_workers': 1, 'pin_memory': True} if use_cuda else {}
    train_loader = torch.utils.data.DataLoader(
        mnist_train, batch_size=batch_size, shuffle=True, **kwargs)
    test_loader = torch.utils.data.DataLoader(
        mnist_test,  batch_size=batch_size, shuffle=True, **kwargs)

    model = Net().to(device)
    optimizer = optim.Adam(model.parameters(), lr=0.001) #1e-3

    for epoch in range(1, n_epochs + 1):
        train(model, device, train_loader, optimizer, epoch)
        test(model, device, test_loader)
        
if __name__ == '__main__':
    main()